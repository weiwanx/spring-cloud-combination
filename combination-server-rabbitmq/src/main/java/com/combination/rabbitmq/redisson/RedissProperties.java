package com.combination.rabbitmq.redisson;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Configuration;import org.springframework.stereotype.Component;/** * @author pen * redis 配置类 */@Configuration@Componentpublic class RedissProperties {//    /**//     * 启动节点//     *///    @Value("${jediss.pool.clusterNodes}")//    private String addNodeAddress;//    /**//     * 扫描集群时间间隔//     *///    @Value("${jediss.pool.scanInterval}")//    private Integer scanInterval;//    /**//     * 设置对于master节点的连接池中连接数最大为500//     *///    @Value("${jediss.pool.masterConnectionPoolSize}")//    private Integer masterConnectionPoolSize;//    /**//     * 设置对于master节点的连接池中连接数最大为500//     *///    @Value("${jediss.pool.slaveConnectionPoolSize}")//    private Integer slaveConnectionPoolSize;//    /**//     * 如果当前连接池里的连接数量超过了最小空闲连接数，而同时有连接空闲时间超过了该数值，那么这些连接将会自动被关闭，并从连接池里去掉。时间单位是毫秒。//     *///    @Value("${jediss.pool.idleConnectionTimeout}")//    private Integer idleConnectionTimeout;//    /**//     * 同任何节点建立连接时的等待超时。时间单位是毫秒。//     *///    @Value("${jediss.pool.connectTimeout}")//    private Integer connectTimeout;//    /**//     * 等待节点回复命令的时间。该时间从命令发送成功时开始计时。//     *///    @Value("${jediss.pool.timeout}")//    private Integer timeout;//    /**//     * ping 心跳//     *///    @Value("${jediss.pool.pingTimeout}")//    private Integer pingTimeout;////    public String getAddNodeAddress() {//        return addNodeAddress;//    }////    public void setAddNodeAddress(String addNodeAddress) {//        this.addNodeAddress = addNodeAddress;//    }////    public Integer getScanInterval() {//        return scanInterval;//    }////    public void setScanInterval(Integer scanInterval) {//        this.scanInterval = scanInterval;//    }////    public Integer getMasterConnectionPoolSize() {//        return masterConnectionPoolSize;//    }////    public void setMasterConnectionPoolSize(Integer masterConnectionPoolSize) {//        this.masterConnectionPoolSize = masterConnectionPoolSize;//    }////    public Integer getSlaveConnectionPoolSize() {//        return slaveConnectionPoolSize;//    }////    public void setSlaveConnectionPoolSize(Integer slaveConnectionPoolSize) {//        this.slaveConnectionPoolSize = slaveConnectionPoolSize;//    }////    public Integer getIdleConnectionTimeout() {//        return idleConnectionTimeout;//    }////    public void setIdleConnectionTimeout(Integer idleConnectionTimeout) {//        this.idleConnectionTimeout = idleConnectionTimeout;//    }////    public Integer getConnectTimeout() {//        return connectTimeout;//    }////    public void setConnectTimeout(Integer connectTimeout) {//        this.connectTimeout = connectTimeout;//    }////    public Integer getPingTimeout() {//        return pingTimeout;//    }////    public void setPingTimeout(Integer pingTimeout) {//        this.pingTimeout = pingTimeout;//    }////    public Integer getTimeout() {//        return timeout;//    }////    public void setTimeout(Integer timeout) {//        this.timeout = timeout;//    }}